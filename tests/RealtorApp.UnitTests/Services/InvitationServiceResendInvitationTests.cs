using Microsoft.EntityFrameworkCore;
using Moq;
using RealtorApp.Contracts.Commands.Invitations;
using RealtorApp.Domain.DTOs;
using RealtorApp.Domain.Models;
using RealtorApp.UnitTests.Helpers;
using Task = System.Threading.Tasks.Task;

namespace RealtorApp.UnitTests.Services;

public class InvitationServiceResendInvitationTests : TestBase
{
    [Fact]
    public async Task ResendInvitationAsync_ValidRequest_ShouldUpdateInvitationAndSendEmail()
    {
        // Arrange
        var agent = CreateTestAgent();
        var clientInvitation = CreateTestClientInvitation(agent.UserId);

        var command = new ResendInvitationCommand
        {
            ClientInvitationId = clientInvitation.ClientInvitationId,
            ClientDetails = new ClientInvitationUpdateRequest
            {
                Email = "updated@example.com",
                FirstName = "UpdatedJohn",
                LastName = "UpdatedDoe",
                Phone = "+1987654321"
            }
        };

        MockEmailService.Setup(x => x.SendBulkInvitationEmailsAsync(It.IsAny<List<InvitationEmailDto>>()))
            .ReturnsAsync(new List<InvitationEmailDto>());

        MockUserService.Setup(x => x.GetUserByEmailAsync(It.IsAny<string>()))
            .ReturnsAsync((User?)null);

        // Capture original token before the operation
        var originalToken = clientInvitation.InvitationToken;

        // Act
        var result = await InvitationService.ResendInvitationAsync(command, agent.UserId);

        // Assert
        Assert.True(result.Success);
        Assert.Null(result.ErrorMessage);

        // Verify invitation was updated - refresh from database
        await DbContext.Entry(clientInvitation).ReloadAsync();

        Assert.Equal("updated@example.com", clientInvitation.ClientEmail);
        Assert.Equal("UpdatedJohn", clientInvitation.ClientFirstName);
        Assert.Equal("UpdatedDoe", clientInvitation.ClientLastName);
        Assert.Equal("+1987654321", clientInvitation.ClientPhone);
        Assert.True(clientInvitation.ExpiresAt > DateTime.UtcNow.AddDays(6));

        // Verify token was regenerated by checking it's different from the original
        var updatedInvitation = await DbContext.ClientInvitations
            .AsNoTracking()
            .FirstAsync(i => i.ClientInvitationId == clientInvitation.ClientInvitationId);
        Assert.NotEqual(originalToken, updatedInvitation.InvitationToken);

        // Verify email was sent
        MockEmailService.Verify(x => x.SendBulkInvitationEmailsAsync(
            It.Is<List<InvitationEmailDto>>(list =>
                list.Count == 1 &&
                list[0].ClientEmail == "updated@example.com")),
            Times.Once);
    }

    [Fact]
    public async Task ResendInvitationAsync_InvitationNotFound_ShouldReturnError()
    {
        // Arrange
        var agent = CreateTestAgent();
        var command = new ResendInvitationCommand
        {
            ClientInvitationId = 9999,
            ClientDetails = new ClientInvitationUpdateRequest
            {
                Email = "test@example.com",
                FirstName = "Test",
                LastName = "User"
            }
        };

        // Act
        var result = await InvitationService.ResendInvitationAsync(command, agent.UserId);

        // Assert
        Assert.False(result.Success);
        Assert.Equal("Invitation not found or already accepted", result.ErrorMessage);
    }

    [Fact]
    public async Task ResendInvitationAsync_WrongAgent_ShouldReturnError()
    {
        // Arrange
        var agent1 = CreateTestAgent();
        var agent2 = CreateTestAgent();
        var clientInvitation = CreateTestClientInvitation(agent1.UserId);

        var command = new ResendInvitationCommand
        {
            ClientInvitationId = clientInvitation.ClientInvitationId,
            ClientDetails = new ClientInvitationUpdateRequest
            {
                Email = "test@example.com",
                FirstName = "Test",
                LastName = "User"
            }
        };

        // Act
        var result = await InvitationService.ResendInvitationAsync(command, agent2.UserId);

        // Assert
        Assert.False(result.Success);
        Assert.Equal("Invitation not found or already accepted", result.ErrorMessage);
    }

    [Fact]
    public async Task ResendInvitationAsync_AcceptedInvitation_ShouldReturnError()
    {
        // Arrange
        var agent = CreateTestAgent(1);
        var clientInvitation = CreateTestClientInvitation(agent.UserId);

        // Mark invitation as accepted
        clientInvitation.AcceptedAt = DateTime.UtcNow;
        await DbContext.SaveChangesAsync();

        var command = new ResendInvitationCommand
        {
            ClientInvitationId = clientInvitation.ClientInvitationId,
            ClientDetails = new ClientInvitationUpdateRequest
            {
                Email = "test@example.com",
                FirstName = "Test",
                LastName = "User"
            }
        };

        // Act
        var result = await InvitationService.ResendInvitationAsync(command, agent.UserId);

        // Assert
        Assert.False(result.Success);
        Assert.Equal("Invitation not found or already accepted", result.ErrorMessage);
    }

    [Fact]
    public async Task ResendInvitationAsync_EmailSendFails_ShouldReturnError()
    {
        // Arrange
        var agent = CreateTestAgent(1);
        var clientInvitation = CreateTestClientInvitation(agent.UserId);

        var command = new ResendInvitationCommand
        {
            ClientInvitationId = clientInvitation.ClientInvitationId,
            ClientDetails = new ClientInvitationUpdateRequest
            {
                Email = "test@example.com",
                FirstName = "Test",
                LastName = "User"
            }
        };

        // Setup email service to return failed invitation
        MockEmailService.Setup(x => x.SendBulkInvitationEmailsAsync(It.IsAny<List<InvitationEmailDto>>()))
            .ReturnsAsync(new List<InvitationEmailDto> { new() {
                ClientEmail = "test@example.com",
                AgentName = "Test Agent",
                EncryptedData = "encrypted_data"
            } });

        MockUserService.Setup(x => x.GetUserByEmailAsync(It.IsAny<string>()))
            .ReturnsAsync((User?)null);

        // Act
        var result = await InvitationService.ResendInvitationAsync(command, agent.UserId);

        // Assert
        Assert.False(result.Success);
        Assert.Equal("Failed to send invitation email", result.ErrorMessage);
    }

    [Fact]
    public async Task ResendInvitationAsync_ExistingUser_ShouldPassCorrectFlagToEncryption()
    {
        // Arrange
        var agent = CreateTestAgent(1);
        var clientInvitation = CreateTestClientInvitation(agent.UserId);
        var existingUser = CreateTestClient(999).User;

        var command = new ResendInvitationCommand
        {
            ClientInvitationId = clientInvitation.ClientInvitationId,
            ClientDetails = new ClientInvitationUpdateRequest
            {
                Email = "existing@example.com",
                FirstName = "Existing",
                LastName = "User"
            }
        };

        MockEmailService.Setup(x => x.SendBulkInvitationEmailsAsync(It.IsAny<List<InvitationEmailDto>>()))
            .ReturnsAsync(new List<InvitationEmailDto>());

        MockUserService.Setup(x => x.GetUserByEmailAsync("existing@example.com"))
            .ReturnsAsync(existingUser);

        string? capturedEncryptionInput = null;
        MockCryptoService.Setup(x => x.Encrypt(It.IsAny<string>()))
            .Callback<string>(input => capturedEncryptionInput = input)
            .Returns<string>(data => $"encrypted_{data}");

        // Act
        var result = await InvitationService.ResendInvitationAsync(command, agent.UserId);

        // Assert
        Assert.True(result.Success);
        Assert.Contains("isExistingUser=True", capturedEncryptionInput);
    }
}